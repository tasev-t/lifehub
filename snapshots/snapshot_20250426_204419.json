{
    "C:\\Users\\tasev\\lifehub\\manage.py": {
        "content": "#!/usr/bin/env python\n\"\"\"Django's command-line utility for administrative tasks.\"\"\"\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'lifehub.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n",
        "last_modified": "2025-04-07T22:58:34.242210",
        "checksum": "8e7bc95b0c73bc845c48eca6482a5806ae46b1e8c20341ef39c16095c18a21a6"
    },
    "C:\\Users\\tasev\\lifehub\\snapshot_generator.py": {
        "content": "import os\nimport json\nimport hashlib\nfrom datetime import datetime\n\n# Složky, které nechceme zahrnout do snapshotu\nEXCLUDE_DIRS = ['venv', '__pycache__', 'migrations', 'static', 'media', '.git']\n\ndef get_file_checksum(file_path, algorithm=\"sha256\"):\n    \"\"\"Vypočítá kontrolní součet souboru pomocí zadaného algoritmu.\"\"\"\n    hash_func = hashlib.new(algorithm)\n    with open(file_path, \"rb\") as f:\n        for chunk in iter(lambda: f.read(4096), b\"\"):\n            hash_func.update(chunk)\n    return hash_func.hexdigest()\n\ndef create_snapshot(directory):\n    \"\"\"Prochází zadaný adresář rekurzivně a generuje snapshot všech souborů s vybranými příponami.\"\"\"\n    snapshot = {}\n    for root, dirs, files in os.walk(directory, topdown=True):\n        # Odebrání nežádoucích složek z průchodu\n        dirs[:] = [d for d in dirs if d not in EXCLUDE_DIRS]\n\n        for file_name in files:\n            if file_name.endswith((\".py\", \".js\", \".html\")):\n                file_path = os.path.join(root, file_name)\n                try:\n                    with open(file_path, \"r\", encoding=\"utf-8\") as f:\n                        content = f.read()\n                    stats = os.stat(file_path)\n                    last_modified = datetime.fromtimestamp(stats.st_mtime).isoformat()\n                    checksum = get_file_checksum(file_path)\n\n                    snapshot[file_path] = {\n                        \"content\": content,\n                        \"last_modified\": last_modified,\n                        \"checksum\": checksum\n                    }\n                except Exception as e:\n                    print(f\"Chyba při čtení {file_path}: {e}\")\n    return snapshot\n\nif __name__ == \"__main__\":\n    directory_to_snapshot = r\"C:\\Users\\tasev\\lifehub\"\n\n    snapshot_data = create_snapshot(directory_to_snapshot)\n\n    timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n    snapshot_filename = f\"snapshot_{timestamp}.json\"\n\n    output_dir = \"snapshots\"\n    os.makedirs(output_dir, exist_ok=True)\n    snapshot_filepath = os.path.join(output_dir, snapshot_filename)\n\n    with open(snapshot_filepath, \"w\", encoding=\"utf-8\") as json_file:\n        json.dump(snapshot_data, json_file, ensure_ascii=False, indent=4)\n\n    print(f\"Snapshot byl úspěšně vytvořen a uložen jako {snapshot_filepath}\")\n",
        "last_modified": "2025-04-26T20:44:01.426476",
        "checksum": "d42da7444de4462450c19acf5b3d6193c0941ffa89c6a92f0fce7b8283c32717"
    },
    "C:\\Users\\tasev\\lifehub\\common\\admin.py": {
        "content": "from django.contrib import admin\n\n# Register your models here.\n",
        "last_modified": "2025-04-07T23:34:59.162484",
        "checksum": "a7ac68a753eeb831b6530bf71bf6917e577139f0734d17cc6a8666391564ab25"
    },
    "C:\\Users\\tasev\\lifehub\\common\\apps.py": {
        "content": "from django.apps import AppConfig\n\n\nclass CommonConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'common'\n",
        "last_modified": "2025-04-07T23:34:59.164353",
        "checksum": "e6e6906601b75e943f9354689d36c7cefd115db72ee156b41dc9bf30c89d9578"
    },
    "C:\\Users\\tasev\\lifehub\\common\\models.py": {
        "content": "from django.db import models\n\n# Create your models here.\n",
        "last_modified": "2025-04-07T23:34:59.164353",
        "checksum": "e0e54c7030f1f5f56004427dd41edd7cc106d8d8b52d148b24e2b322454fb0aa"
    },
    "C:\\Users\\tasev\\lifehub\\common\\tests.py": {
        "content": "from django.test import TestCase\n\n# Create your tests here.\n",
        "last_modified": "2025-04-07T23:34:59.164353",
        "checksum": "dae0da7efdcdb3a7fb572d5e914b60631099122d4a4727ac6434c016161c5fe1"
    },
    "C:\\Users\\tasev\\lifehub\\common\\urls.py": {
        "content": "from django.urls import path\nfrom .views import changelog, SnapshotView\n\nurlpatterns = [\n    path('changelog/', changelog, name='changelog'),\n    path('snapshot/', SnapshotView.as_view(), name='snapshot'),\n]\n",
        "last_modified": "2025-04-08T09:27:17.642856",
        "checksum": "733c260d2ee640591eb1fc55c24d80fb5720262d4660ab1da781e63bf9757cd8"
    },
    "C:\\Users\\tasev\\lifehub\\common\\views.py": {
        "content": "import os\nfrom django.conf import settings\nfrom django.http import JsonResponse\nfrom datetime import datetime\nfrom rest_framework.views import APIView\nfrom rest_framework.response import Response\nfrom rest_framework.permissions import IsAdminUser  # nebo jiná permission třída\n\n# === původní funkce: changelog ===\ndef changelog(request):\n    \"\"\"\n    Načte obsah CHANGELOG.md a přidá aktuální datum a čas k odpovědi.\n    \"\"\"\n    changelog_path = os.path.join(settings.BASE_DIR, 'CHANGELOG.md')\n    try:\n        with open(changelog_path, 'r', encoding='utf-8') as f:\n            content = f.read()\n    except IOError:\n        content = \"Changelog nebyl nalezen nebo se nepodařilo načíst.\"\n    \n    current_time = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n    content += f\"\\n\\n---\\nAktuální čas: {current_time}\"\n    \n    return JsonResponse({\"changelog\": content})\n\n\n# === nová utilitní funkce ===\ndef generate_file_snapshot(start_path='.', exclude_hidden=True):\n    \"\"\"\n    Prochází projektový adresář a vrací seznam cest ke všem souborům (bez obsahu).\n    \"\"\"\n    file_list = []\n    for dirpath, _, filenames in os.walk(start_path):\n        for filename in filenames:\n            rel_path = os.path.relpath(os.path.join(dirpath, filename), start_path)\n            if exclude_hidden and any(part.startswith('.') for part in rel_path.split(os.sep)):\n                continue\n            file_list.append(rel_path.replace(\"\\\\\", \"/\"))  # Windows-friendly\n    return sorted(file_list)\n\n\n# === nový endpoint přes DRF ===\nclass SnapshotView(APIView):\n    permission_classes = [IsAdminUser]  # nebo změň dle potřeby (např. IsAuthenticated)\n\n    def get(self, request):\n        start_path = settings.BASE_DIR\n        snapshot = generate_file_snapshot(start_path=start_path)\n        return Response({\"file_structure\": snapshot})\n",
        "last_modified": "2025-04-08T09:26:17.154018",
        "checksum": "903cfc634ed8341a6931ee1f9ac25470eabdcf60c0ac17cb1d5c40a8cdeef1f0"
    },
    "C:\\Users\\tasev\\lifehub\\common\\__init__.py": {
        "content": "",
        "last_modified": "2025-04-07T23:34:59.178576",
        "checksum": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "C:\\Users\\tasev\\lifehub\\common\\utils\\snapshot.py": {
        "content": "import os\n\ndef generate_file_snapshot(start_path='.', exclude_hidden=True):\n    \"\"\"\n    Prochází projektový adresář a vrací seznam cest ke všem souborům.\n    \"\"\"\n    file_list = []\n    for dirpath, _, filenames in os.walk(start_path):\n        for filename in filenames:\n            rel_path = os.path.relpath(os.path.join(dirpath, filename), start_path)\n            if exclude_hidden and any(part.startswith('.') for part in rel_path.split(os.sep)):\n                continue\n            file_list.append(rel_path.replace(\"\\\\\", \"/\"))  # Windows-friendly\n    return sorted(file_list)\n\ndef save_snapshot_to_file(snapshot, output_file='project_snapshot.txt'):\n    with open(output_file, 'w', encoding='utf-8') as f:\n        for path in snapshot:\n            f.write(path + '\\n')\n",
        "last_modified": "2025-04-08T09:24:26.318842",
        "checksum": "a360a8348bec26f59d3b95731b970cc3ac39391d21ae721168744b7ce673ff76"
    },
    "C:\\Users\\tasev\\lifehub\\finance\\admin.py": {
        "content": "from django.contrib import admin\n\n# Register your models here.\n",
        "last_modified": "2025-04-07T22:59:27.453034",
        "checksum": "a7ac68a753eeb831b6530bf71bf6917e577139f0734d17cc6a8666391564ab25"
    },
    "C:\\Users\\tasev\\lifehub\\finance\\apps.py": {
        "content": "from django.apps import AppConfig\n\n\nclass FinanceConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'finance'\n",
        "last_modified": "2025-04-07T22:59:27.457273",
        "checksum": "75017600f46ce1114d42d96c2d40c8b4074be084d40ad914aa14bbf3d06241b2"
    },
    "C:\\Users\\tasev\\lifehub\\finance\\models.py": {
        "content": "from django.db import models\n\n# Create your models here.\n",
        "last_modified": "2025-04-07T22:59:27.458386",
        "checksum": "e0e54c7030f1f5f56004427dd41edd7cc106d8d8b52d148b24e2b322454fb0aa"
    },
    "C:\\Users\\tasev\\lifehub\\finance\\tests.py": {
        "content": "from django.test import TestCase\n\n# Create your tests here.\n",
        "last_modified": "2025-04-07T22:59:27.460475",
        "checksum": "dae0da7efdcdb3a7fb572d5e914b60631099122d4a4727ac6434c016161c5fe1"
    },
    "C:\\Users\\tasev\\lifehub\\finance\\urls.py": {
        "content": "# finance/urls.py\nfrom django.urls import path\nfrom .views import finance_home\n\nurlpatterns = [\n    path('', finance_home, name='finance-home'),\n]\n",
        "last_modified": "2025-04-07T23:21:21.913451",
        "checksum": "03edf00b6236c8bed82132d860816e2f8c4b942e6f978f610c16e8a4ab97b0f4"
    },
    "C:\\Users\\tasev\\lifehub\\finance\\views.py": {
        "content": "# finance/views.py\nfrom django.http import JsonResponse\n\ndef finance_home(request):\n    return JsonResponse({\"message\": \"Finance home endpoint\"})\n",
        "last_modified": "2025-04-07T23:21:28.875252",
        "checksum": "86921e4400d8c9a56463aae1806000099576d160afc454610867bbcb11b25a63"
    },
    "C:\\Users\\tasev\\lifehub\\finance\\__init__.py": {
        "content": "",
        "last_modified": "2025-04-07T22:59:27.460475",
        "checksum": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "C:\\Users\\tasev\\lifehub\\lifehub\\asgi.py": {
        "content": "\"\"\"\nASGI config for lifehub project.\n\nIt exposes the ASGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.2/howto/deployment/asgi/\n\"\"\"\n\nimport os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'lifehub.settings')\n\napplication = get_asgi_application()\n",
        "last_modified": "2025-04-07T22:58:34.260165",
        "checksum": "ee6aef190b5875eef923273de5b8bf6d2186f830454aaec9d5c7f077d62f629d"
    },
    "C:\\Users\\tasev\\lifehub\\lifehub\\settings.py": {
        "content": "\"\"\"\nDjango settings pro LifeHub projekt.\n\"\"\"\n\nimport os\nfrom pathlib import Path\nfrom datetime import timedelta\n\nBASE_DIR = Path(__file__).resolve().parent.parent\nSECRET_KEY = 'django-insecure-CHANGE_ME'\nDEBUG = True\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n\n    'django.contrib.sites',\n    'rest_framework',\n    'rest_framework.authtoken',\n    'corsheaders',\n    'dj_rest_auth',\n    'dj_rest_auth.registration',\n    'allauth',\n    'allauth.account',\n    'allauth.socialaccount',\n\n    'users',\n    'nutrition',\n    'finance',\n    'pets',\n    'common',\n]\n\nSITE_ID = 1\n\nMIDDLEWARE = [\n    'corsheaders.middleware.CorsMiddleware',\n    'allauth.account.middleware.AccountMiddleware',\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'lifehub.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'lifehub.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},\n]\n\nLANGUAGE_CODE = 'cs-cz'\nTIME_ZONE = 'Europe/Prague'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static')\n\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n\nCORS_ALLOW_ALL_ORIGINS = True\n\nREST_FRAMEWORK = {\n    \"DEFAULT_AUTHENTICATION_CLASSES\": [\n        'rest_framework.authentication.SessionAuthentication',\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ],\n}\n\nSIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),\n    'ROTATE_REFRESH_TOKENS': True,\n    'BLACKLIST_AFTER_ROTATION': True,\n    'ALGORITHM': 'HS256',\n    'SIGNING_KEY': SECRET_KEY,\n    'AUTH_HEADER_TYPES': ('Bearer',),\n}\n\nAUTH_USER_MODEL = 'users.UserProfile'\n\nREST_AUTH = {\n    'USE_JWT': True,\n    'REGISTER_SERIALIZER': 'users.serializers.CustomRegisterSerializer'\n}\n\nAUTHENTICATION_BACKENDS = [\n    'django.contrib.auth.backends.ModelBackend',\n    'allauth.account.auth_backends.AuthenticationBackend',\n]\n\n# Aktualizovaná konfigurace dle nejnovějších standardů django-allauth\nACCOUNT_LOGIN_METHODS = ['email']\nACCOUNT_SIGNUP_FIELDS = ['email*', 'password1*', 'password2*']\nACCOUNT_UNIQUE_EMAIL = True\nACCOUNT_EMAIL_VERIFICATION = 'optional'\n\n",
        "last_modified": "2025-04-25T00:17:03.263953",
        "checksum": "293138389fabfde82fc8bd2c4968c4f43ceb910759c26fd748e5f180173e4590"
    },
    "C:\\Users\\tasev\\lifehub\\lifehub\\urls.py": {
        "content": "from django.contrib import admin\nfrom django.urls import path, include\nfrom rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/users/', include('users.urls')),\n    path('api/nutrition/', include('nutrition.urls')),\n    path('api/finance/', include('finance.urls')),\n    path('api/pets/', include('pets.urls')),\n    path('api/common/', include('common.urls')),\n    path('api/token/', TokenObtainPairView.as_view(), name='token_obtain_pair'),\n    path('api/token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),\n    path('api/auth/', include('dj_rest_auth.urls')),\n    path('api/auth/registration/', include('dj_rest_auth.registration.urls')),\n]",
        "last_modified": "2025-04-16T23:02:14.432547",
        "checksum": "bbc4f75745ade75d9aeb6f2db17fd42d322eb8f5b3285ee866a35ebc4aaacd1c"
    },
    "C:\\Users\\tasev\\lifehub\\lifehub\\wsgi.py": {
        "content": "\"\"\"\nWSGI config for lifehub project.\n\nIt exposes the WSGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.2/howto/deployment/wsgi/\n\"\"\"\n\nimport os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'lifehub.settings')\n\napplication = get_wsgi_application()\n",
        "last_modified": "2025-04-07T22:58:34.309954",
        "checksum": "60f0e943bcbb076aa1d644280b33cca11eb6d00234b8b77a93046b8322522d77"
    },
    "C:\\Users\\tasev\\lifehub\\lifehub\\__init__.py": {
        "content": "",
        "last_modified": "2025-04-07T22:58:34.309954",
        "checksum": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "C:\\Users\\tasev\\lifehub\\nutrition\\admin.py": {
        "content": "from django.contrib import admin\n\n# Register your models here.\n",
        "last_modified": "2025-04-07T22:59:26.925368",
        "checksum": "a7ac68a753eeb831b6530bf71bf6917e577139f0734d17cc6a8666391564ab25"
    },
    "C:\\Users\\tasev\\lifehub\\nutrition\\apps.py": {
        "content": "from django.apps import AppConfig\n\n\nclass NutritionConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'nutrition'\n",
        "last_modified": "2025-04-07T22:59:26.926872",
        "checksum": "e20ff4d88ab636d41e9f1fa390b483e01f18ce2f26c9883a70e24a2db4a2f8c1"
    },
    "C:\\Users\\tasev\\lifehub\\nutrition\\models.py": {
        "content": "from django.db import models\n\nclass Recipe(models.Model):\n    title = models.CharField(max_length=255)\n    description = models.TextField(blank=True)\n    instructions = models.TextField()\n\n    def __str__(self):\n        return self.title\n",
        "last_modified": "2025-04-07T23:16:20.180336",
        "checksum": "ae83c27eba4cd65a5a3fd0369f9b87e11fdcf39c97a015e1e31861899120c48d"
    },
    "C:\\Users\\tasev\\lifehub\\nutrition\\serializers.py": {
        "content": "from rest_framework import serializers\nfrom .models import Recipe\n\nclass RecipeSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Recipe\n        fields = ['id', 'title', 'description', 'instructions']\n",
        "last_modified": "2025-04-07T23:17:07.773223",
        "checksum": "4c33f98284b88310c511725bb6a2e9c2ad5be9823be0df97eee1b9bebfc76539"
    },
    "C:\\Users\\tasev\\lifehub\\nutrition\\tests.py": {
        "content": "from django.test import TestCase\n\n# Create your tests here.\n",
        "last_modified": "2025-04-07T22:59:26.927783",
        "checksum": "dae0da7efdcdb3a7fb572d5e914b60631099122d4a4727ac6434c016161c5fe1"
    },
    "C:\\Users\\tasev\\lifehub\\nutrition\\urls.py": {
        "content": "from django.urls import path\nfrom .views import RecipeListView\n\nurlpatterns = [\n    path('recipes/', RecipeListView.as_view(), name='recipe-list'),\n]\n",
        "last_modified": "2025-04-07T23:17:32.036426",
        "checksum": "8be21936cb2010a5f944b0b17902d4513c2315d7a5f68a390c826603bba3a90c"
    },
    "C:\\Users\\tasev\\lifehub\\nutrition\\views.py": {
        "content": "from rest_framework import generics\nfrom .models import Recipe\nfrom .serializers import RecipeSerializer\n\nclass RecipeListView(generics.ListAPIView):\n    queryset = Recipe.objects.all()\n    serializer_class = RecipeSerializer\n",
        "last_modified": "2025-04-07T23:17:19.233504",
        "checksum": "1d03b44b70c3399f5c1ad114c79c4505d05481c8575f2b4843a0638375344da6"
    },
    "C:\\Users\\tasev\\lifehub\\nutrition\\__init__.py": {
        "content": "",
        "last_modified": "2025-04-07T22:59:26.927783",
        "checksum": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "C:\\Users\\tasev\\lifehub\\pets\\admin.py": {
        "content": "from django.contrib import admin\n\n# Register your models here.\n",
        "last_modified": "2025-04-07T23:00:16.981711",
        "checksum": "a7ac68a753eeb831b6530bf71bf6917e577139f0734d17cc6a8666391564ab25"
    },
    "C:\\Users\\tasev\\lifehub\\pets\\apps.py": {
        "content": "from django.apps import AppConfig\n\n\nclass PetsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'pets'\n",
        "last_modified": "2025-04-07T23:00:16.983445",
        "checksum": "eb254853c855077e73bbd014292dd3a2502f32c6837aa0263ed8e6ce689b604e"
    },
    "C:\\Users\\tasev\\lifehub\\pets\\models.py": {
        "content": "from django.db import models\n\n# Create your models here.\n",
        "last_modified": "2025-04-07T23:00:16.983445",
        "checksum": "e0e54c7030f1f5f56004427dd41edd7cc106d8d8b52d148b24e2b322454fb0aa"
    },
    "C:\\Users\\tasev\\lifehub\\pets\\tests.py": {
        "content": "from django.test import TestCase\n\n# Create your tests here.\n",
        "last_modified": "2025-04-07T23:00:16.984283",
        "checksum": "dae0da7efdcdb3a7fb572d5e914b60631099122d4a4727ac6434c016161c5fe1"
    },
    "C:\\Users\\tasev\\lifehub\\pets\\urls.py": {
        "content": "from django.urls import path\n# Zatím nepřidáváme žádné view, takže můžeme definovat prázdný seznam URL vzorů\nurlpatterns = [\n    # Později sem přidáš URL vzory pro modul \"pets\"\n]\n",
        "last_modified": "2025-04-07T23:22:10.966374",
        "checksum": "13342a8dd4689673b7f4f560f822881ff3a3262d0ee383cebbe670c32c984cf3"
    },
    "C:\\Users\\tasev\\lifehub\\pets\\views.py": {
        "content": "from django.http import JsonResponse\n\ndef pets_home(request):\n    return JsonResponse({\"message\": \"Pets home endpoint\"})\n",
        "last_modified": "2025-04-07T23:22:47.432811",
        "checksum": "5846b3dcb4307f290dcc4f50a87b9ac84a270052376ef0833e1942d31740f9bc"
    },
    "C:\\Users\\tasev\\lifehub\\pets\\__init__.py": {
        "content": "",
        "last_modified": "2025-04-07T23:00:16.985468",
        "checksum": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "C:\\Users\\tasev\\lifehub\\users\\admin.py": {
        "content": "from django.contrib import admin\n\n# Register your models here.\n",
        "last_modified": "2025-04-07T22:59:26.377452",
        "checksum": "a7ac68a753eeb831b6530bf71bf6917e577139f0734d17cc6a8666391564ab25"
    },
    "C:\\Users\\tasev\\lifehub\\users\\apps.py": {
        "content": "from django.apps import AppConfig\n\n\nclass UsersConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'users'\n",
        "last_modified": "2025-04-07T22:59:26.389590",
        "checksum": "e92aa2f3ac1ad54a4f129ca96fac13496adb9b484634d9ca6515f5ee0e030811"
    },
    "C:\\Users\\tasev\\lifehub\\users\\models.py": {
        "content": "from django.contrib.auth.models import AbstractUser\nfrom django.db import models\n\nclass FamilyGroup(models.Model):\n    name = models.CharField(max_length=100)\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return self.name\n\nclass UserProfile(AbstractUser):\n    MODE_CHOICES = (\n        ('personal', 'Personal'),\n        ('family', 'Family'),\n    )\n\n    profile_mode = models.CharField(max_length=20, choices=MODE_CHOICES, default='personal')\n    family_group = models.ForeignKey(\n        FamilyGroup, related_name='members', null=True, blank=True, on_delete=models.SET_NULL\n    )\n\n    def __str__(self):\n        return self.username\n",
        "last_modified": "2025-04-24T23:54:50.451535",
        "checksum": "c451da0eba84e361be2b86bbce3ce6c2e0a13f72ab3cacd24dc406b5e4d9037c"
    },
    "C:\\Users\\tasev\\lifehub\\users\\serializers.py": {
        "content": "from django.contrib.auth import get_user_model\nfrom rest_framework import serializers\nfrom .models import FamilyGroup\nfrom dj_rest_auth.registration.serializers import RegisterSerializer\n\nUser = get_user_model()\n\n\nclass CustomRegisterSerializer(RegisterSerializer):\n    profile_mode = serializers.ChoiceField(choices=User.MODE_CHOICES, default='personal')\n\n    def custom_signup(self, request, user):\n        user.profile_mode = self.validated_data.get('profile_mode', 'personal')\n        user.save()\n\n\nclass UserRegistrationSerializer(serializers.ModelSerializer):\n    password = serializers.CharField(write_only=True, required=True)\n\n    class Meta:\n        model = User\n        fields = ['username', 'email', 'password', 'profile_mode']\n\n    def create(self, validated_data):\n        user = User(\n            username=validated_data['username'],\n            email=validated_data['email'],\n            profile_mode=validated_data.get('profile_mode', 'personal')\n        )\n        user.set_password(validated_data['password'])\n        user.save()\n        return user\n\n\nclass FamilyGroupSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = FamilyGroup\n        fields = ['id', 'name', 'created_at']\n\n\nclass UserProfileSerializer(serializers.ModelSerializer):\n    family_group = FamilyGroupSerializer(read_only=True)\n\n    class Meta:\n        model = User\n        fields = ['id', 'username', 'email', 'profile_mode', 'family_group']",
        "last_modified": "2025-04-16T23:02:41.095935",
        "checksum": "683d1fa6dcee9f90094141ac6ce2a5020f9623e36da4312646eea16246dddf87"
    },
    "C:\\Users\\tasev\\lifehub\\users\\tests.py": {
        "content": "from django.urls import reverse\nfrom rest_framework.test import APITestCase\nfrom rest_framework import status\nfrom django.contrib.auth import get_user_model\n\nUser = get_user_model()\n\n\nclass RegistrationTestCase(APITestCase):\n    def test_user_registration(self):\n        url = reverse('dj-rest-auth:register')\n        data = {\n            'username': 'testuser',\n            'email': 'test@example.com',\n            'password1': 'complexpassword123',\n            'password2': 'complexpassword123',\n            'profile_mode': 'personal'\n        }\n        response = self.client.post(url, data)\n        self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n        self.assertTrue(User.objects.filter(username='testuser').exists())",
        "last_modified": "2025-04-16T23:25:24.236336",
        "checksum": "c44c8f7df9dffc7f6eff23741b4ab34691c46294424e9268027e7cefe69e2158"
    },
    "C:\\Users\\tasev\\lifehub\\users\\urls.py": {
        "content": "from django.urls import path\nfrom .views import UserProfileView\nfrom .views import RegisterUserView\n\nurlpatterns = [\n    path('register/', RegisterUserView.as_view(), name='user-register'),\n    path('profile/', UserProfileView.as_view(), name='user-profile'),\n]\n",
        "last_modified": "2025-04-16T23:04:04.013967",
        "checksum": "01e342b384074bbc8255a0ea99a35907049eb1aa2eb3060bb233b416dc995d72"
    },
    "C:\\Users\\tasev\\lifehub\\users\\views.py": {
        "content": "from rest_framework.permissions import IsAuthenticated, AllowAny\nfrom rest_framework.response import Response\nfrom rest_framework.views import APIView\nfrom rest_framework import status\nfrom rest_framework.generics import CreateAPIView\nfrom .models import FamilyGroup\nfrom .serializers import UserProfileSerializer, UserRegistrationSerializer\n\n\nclass UserProfileView(APIView):\n    permission_classes = [IsAuthenticated]\n\n    def get(self, request):\n        serializer = UserProfileSerializer(request.user)\n        return Response(serializer.data)\n\n    def put(self, request):\n        user = request.user\n        mode = request.data.get('profile_mode')\n\n        if mode not in ['personal', 'family']:\n            return Response({'error': 'Invalid profile mode'}, status=status.HTTP_400_BAD_REQUEST)\n\n        user.profile_mode = mode\n\n        if mode == 'family':\n            family_group, created = FamilyGroup.objects.get_or_create(name=f\"{user.username}'s family\")\n            user.family_group = family_group\n        else:\n            user.family_group = None\n\n        user.save()\n        serializer = UserProfileSerializer(user)\n        return Response(serializer.data)\n\n\nclass RegisterUserView(CreateAPIView):\n    serializer_class = UserRegistrationSerializer\n    permission_classes = [AllowAny]\n",
        "last_modified": "2025-04-16T23:23:51.656024",
        "checksum": "b84be08b5f552e633fcdec7f2f946990558c233766a6066c5a033c4485894685"
    },
    "C:\\Users\\tasev\\lifehub\\users\\__init__.py": {
        "content": "",
        "last_modified": "2025-04-07T22:59:26.418657",
        "checksum": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    }
}